uqtpy.expander.io
=================

.. py:module:: uqtpy.expander.io




Module Contents
---------------

.. py:class:: GPIO

   .. py:attribute:: address


   .. py:method:: setI2C(scl=22, sda=21, id=-1, freq=400000)

      setI2C

      :param scl: Clock pin in I2C communication

      :param sda: Data pin in I2C communication

      :param id:  Software 1, Hardware -1

      :param freq:    Frequency

      :return:    No return value



   .. py:method:: sweep(port, start_angle, stop_angle, step=1, delay=10)

      Rotate the servo motor

      :param port:    Port number of servo attached

      :param start_angle: Starting position

      :param stop_angle:   stop position

      :param step:   Number of steps

      :param delay:   Delay in milli seconds

      :return:    No return value



   .. py:method:: digitalRead(port)

      Read the digital status of any port

      :param port:    Port number attached to IO expander

      :return:    Returns last value reported to Pin



   .. py:method:: digitalWrite(port, value)

      DIgital write functionality to any port

      :param port:     Port number attached to IO expander

      :param value:   Digital Pin state value

      :return:    No return value



   .. py:method:: analogRead(port)

      Analog read from port

      :param port: Port number attached to IO expander

      :return:    Last value reported to pin



   .. py:method:: pwm(port, pwmvalue)

      Pwm write to any port

      :param port: Port number attached to IO expander

      :param pwmvalue: Pwm value that need to written for pin

      :return:    No return value



   .. py:method:: neopixelInitialize(port=None, pixels=None)

      :param port:

      :param pixels:

      :return:



   .. py:method:: neopixelSet(port, index, red, green, blue, show=False)

      :param port:

      :param index:

      :param red:

      :param green:

      :param blue:

      :return:



   .. py:method:: neopixelShow(port)

      :param port:

      :return:



   .. py:method:: readTemperature(port)

      :param port:

      :return:



   .. py:method:: readUS(port)

      :param port:

      :return:



